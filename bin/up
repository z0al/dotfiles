#!/usr/bin/env fish

# Usage:
# Switches to the configuration using the default host name:
# $ up
#
# Switches to the configuration for "myhost":
# $ up -h myhost
#
# Use a different dotfiles directory (default is ~/.dotfiles):
# $ up -d /path/to/dotfiles
#
# Build without switching system configuration:
# $ up build
#
# Switch configuration but don't add boot menu entry (nixos only):
# $ up test
#
# Reclaim disk space:
# $ up prune
#
# Unknown flags are passed down. For example, to show trace use the
# following:
# $ up --show-trace

function nix
    command nix --experimental-features 'nix-command flakes' $argv
end

function rebuild
    switch (uname)
        case Darwin
            if type -q darwin-rebuild
                darwin-rebuild $argv
            else
                nix run nix-darwin -- $argv
            end
        case '*'
            sudo nixos-rebuild $argv
    end
end

function up
    # Options:
    # -t/--target   configuration target
    set -l options (fish_opt -s t -l target -r)

    # -f/--flake    path to flake
    set options $options (fish_opt -s f -l flake -r)

    # -h/--help        show help
    set options $options (fish_opt -s h -l help)

    # Using -i to ignore unknown flags so we can pass them down later
    argparse -i -n up $options -- $argv
    or return

    # Default flake path to $(pwd)
    set -q _flag_flake || set _flag_flake $(pwd)

    # Nix expects --flake /path/to/flake#target. If the target is
    # empty, then nix takes the current hostname.
    set -l flake "$_flag_flake#$_flag_target"

    # Any unknown option is passed through to the underlying command.
    set -l options $argv[2..-1]

    if set -q _flag_help
        echo "Apply flake-based system configuration using Nix"
        echo ""
        echo "Usage: up [options] [command]"
        echo ""
        echo "Options:"
        echo "  -t, --target name    Target flake configuration"
        echo "  -f, --flake PATH     Use the flake at PATH"
        echo "  -h, --help           Show help"
        echo ""
        echo "Commands:"
        echo "  build                Build the configuration"
        echo "  fetch                Update the flake"
        echo "  prune                Reclaim disk space"
        echo "  test                 Apply without adding boot entry (Linux only)"
        echo ""
        echo "Note: unknown flags are passed down to the underlying command"
        return 0
    end

    switch $argv[1]
        case build
            rebuild build --flake $flake $options

        case fetch
            nix flake update $_flag_flake $options

        case prune
            nix-collect-garbage $options

        case test
            if test (uname) = Darwin
                echo "'test' command is not supported on macOS"
                return 1
            end

            rebuild test --fast --flake $flake $options

        case '*'
            # This is special since we don't have a subcommand
            set -l options $argv

            rebuild switch --flake $flake $options
    end
end

up $argv
